// This file has been generated by Specta. DO NOT EDIT.

export type Ancestry = { _id: string; fvttId: string; name: string; additionalLanguages: Languages; boosts?: BoostOrFlaw[]; flaws?: BoostOrFlaw[]; hp: number; reach: number | null; rules?: Rule[]; size: Size; rarity: string; traits?: string[]; vision: string; slug: string; speed: Speed; languages: Languages; features?: AncestryFeature[]; publication: Publication; heritage?: AncestryHeritage[]; description: AncestryDescription }

export type AncestryDescription = { summary: string; roleplaying: string }

export type AncestryFeature = { _id: string; id: string; img: string; name: string; type: string; effects?: string[]; description: string; actionType: string; publication: Publication; rules?: Rule[]; rarity: string; traits?: string[]; selectedTraits?: JsonValue; slug: string }

export type AncestryHeritage = { _id: string; fvttId: string; actionType: string; slug: string; rarity: string; traits?: string[]; rules?: Rule[]; publication: Publication; selectedTraits?: string[]; description: string[]; ancestrySlug: string }

export type Attribute = "Strength" | "Dexterity" | "Constitution" | "Intelligence" | "Wisdom" | "Charisma"

export type BoostOrFlaw = { type: "free" } | { type: "grant"; att: Attribute } | { type: "choose"; atts: Attribute[] }

export type ChoiceSetAllowedDrops = { label: string; predicate: string[] }

export type CreateUserForm = { username: string; password: string; email: string }

export type Damage = { base: DamageRoll }

export type DamageRoll = { damageType: string; dice: number; die: string }

export type Journal = { id: string; type: string; name: string; text: string }

export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }

export type Languages = { count: number | null; value: string[]; custom: string | null }

export type LoginForm = { username: string; password: string }

export type MVec<T> = null | T | T[]

export type Publication = { license: string; remaster: boolean; title: string; source: string | null; page: string | null }

export type Rule = { key: "ActiveEffectLike"; mode: string; path: string; value: JsonValue; predicate?: MVec<RulePredicateFilter> } | { key: "Strike"; fist: boolean | null; damage: Damage | null; category: string | null; group: string | null; img: string | null; range: JsonValue | null; slug: string | null; label: string | null; predicate?: MVec<RulePredicateFilter>; traits?: string[]; baseType: string | null } | { key: "RollOption"; alwaysActive: boolean | null; mergeable: boolean | null; toggleable: boolean | null; removeUponCreate: boolean | null; label: string | null; option: string; domain: string | null; predicate?: MVec<RulePredicateFilter>; suboptions?: RuleChoice[]; value?: JsonValue | null } | { key: "BaseSpeed"; selector: MVec<string>; value: number; predicate?: MVec<RulePredicateFilter> } | { key: "GrantItem"; reevaluateOnUpdate: boolean | null; allowDuplicate: boolean | null; nestFeat: boolean | null; uuid: string; predicate?: MVec<RulePredicateFilter>; preselectChoices?: { [key in string]: string } } | { key: "ItemAlteration"; itemId: string | null; itemType: string | null; mode: string; predicate?: MVec<RulePredicateFilter>; property: string; textRef?: string[]; value?: JsonValue | null } | { key: "ChoiceSet"; adjustName: boolean | null; actorFlag: boolean | null; allowedDrops: ChoiceSetAllowedDrops | null; choices?: MVec<RuleChoice>; rollOption: string | null; label: string | null; flag: string | null; prompt: string | null } | { key: "CreatureSize"; value: string } | { key: "FlatModifier"; hideIfDisabled: boolean | null; label: string | null; predicate?: MVec<RulePredicateFilter>; slug: string | null; selector: MVec<string>; type: string | null; value: JsonValue } | { key: "AdjustDegreeOfSuccess"; adjustment?: { [key in string]: string }; predicate?: MVec<RulePredicateFilter>; selector: MVec<string>; type: string | null; outcome?: string[] } | { key: "Weakness"; predicate?: MVec<RulePredicateFilter>; type: string; value: string } | { key: "Immunity"; type: string } | { key: "AdjustStrike"; mode: string; property: string; value: string; definition?: string[]; predicate?: MVec<RulePredicateFilter> } | { key: "Sense"; selector: MVec<string>; range: JsonValue | null; acuity: string | null; value: JsonValue | null } | { key: "Resistance"; value: string; type: string } | { key: "DamageDice"; override?: { [key in string]: JsonValue }; selector: MVec<string>; predicate?: MVec<RulePredicateFilter> } | { key: "Note"; predicate?: MVec<RulePredicateFilter>; selector: MVec<string>; text: string; title: string; outcome?: string[] } | { key: "ActorTraits"; predicate?: MVec<RulePredicateFilter>; add?: string[]; remove?: string[] } | { key: "AdjustModifier"; suppress: boolean | null; mode: string; predicate?: MVec<RulePredicateFilter>; selector: MVec<string>; slug: string } | { key: "TokenLight"; predicate?: MVec<RulePredicateFilter> } | { key: "Aura"; effects: JsonValue; radius: JsonValue; traits: JsonValue }

export type RuleChoice = { label: string | null; value: JsonValue; filter?: MVec<RulePredicateFilter> }

export type RulePredicateFilter = string | number | { and: MVec<RulePredicateFilter> } | { not: MVec<RulePredicateFilter> } | { nor: MVec<RulePredicateFilter> } | { lte: MVec<RulePredicateFilter> } | { or: MVec<RulePredicateFilter> }

export type Size = "Tiny" | "Small" | "Medium" | "Large"

export type Speed = { walk: number; swim: number | null }

export type Summary = { id: string; slug: string; name: string; data: SummaryData[] }

export type SummaryData = { type: "String"; value: string; tooltip: string | null; link: string | null; abbreviation: SummaryDataAbbreviateType | null } | { type: "Number"; value: number; unit: SummaryDataNumberUnit | null } | { type: "Tag"; value: string; tooltip: string | null; link: string | null; category: SummaryDataTagCategory; abbreviation: SummaryDataAbbreviateType | null }

export type SummaryDataAbbreviateType = "source"

export type SummaryDataNumberUnit = "feet"

export type SummaryDataTagCategory = "rarity"


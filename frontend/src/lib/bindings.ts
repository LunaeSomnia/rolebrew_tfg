// This file has been generated by Specta. DO NOT EDIT.

export type Action = { _id: string; fvttId: string; name: string; actionType: string | null; actions: number | null; category: string | null; description: string; publication: Publication; rules?: Rule[]; rarity: string | null; traits?: string[]; slug: string; type: string }

export type Ancestry = { _id: string; fvttId: string; name: string; additionalLanguages: Languages; boosts?: BoostOrFlaw[]; flaws?: BoostOrFlaw[]; hp: number; reach: number | null; rules?: Rule[]; size: Size; rarity: string; traits?: string[]; vision: string; slug: string; speed: Speed; languages: Languages; features?: Feat[]; publication: Publication; heritages?: Item[]; description: AncestryDescription; type: string }

export type AncestryDescription = { summary: string; roleplaying: string }

export type Attribute = "Strength" | "Dexterity" | "Constitution" | "Intelligence" | "Wisdom" | "Charisma"

export type Background = { _id: string; fvttId: string; name: string; boosts?: BoostOrFlaw[]; description: string; features?: Feat[]; publication: Publication; rules?: Rule[]; trainedSkills: BackgroundTrainedSkills; rarity: string; traits?: string[]; slug: string; type: string }

export type BackgroundTrainedSkills = { custom: string | null; lore?: string[]; value?: Skill[] }

export type BoostOrFlaw = { type: "free" } | { type: "grant"; att: Attribute } | { type: "choose"; atts: Attribute[] }

export type Character = { _id: string; name: string; level: number; ancestry: string; class: string; background: string }

export type Choice = { label: string; value: string }

export type ChoiceSetAllowedDrops = { label: string | null; predicate?: MVecType<RulePredicateFilter> }

export type Class = { _id: string; fvttId: string; name: string; ancestryFeatLevels?: number[]; attacks: ClassAttacks; classFeatLevels?: number[]; defenses: ClassDefenses; description: string; generalFeatLevels?: number[]; hp: number; features?: Feat[]; keyAbility?: Attribute[]; perception: Proficiency; publication: Publication; rules?: Rule[]; savingThrows: ClassSavingThrows; skillFeatLevels?: number[]; skillIncreaseLevels?: number[]; spellcasting: boolean; trainedSkills: ClassTrainedSkills; rarity: string; traits?: string[]; slug: string; type: string }

export type ClassAttacks = { unarmed: boolean; simple: boolean; martial: boolean; advanced: boolean; other: ClassAttacksOther }

export type ClassAttacksOther = { name: string; rank: Proficiency }

export type ClassDefenses = { unarmored: boolean; light: boolean; medium: boolean; heavy: boolean }

export type ClassSavingThrows = { fortitude: Proficiency; reflex: Proficiency; will: Proficiency }

export type ClassTrainedSkills = { additional: number; value: Skill[]; custom: string | null }

export type Damage = { base: DamageRoll }

export type DamageCategory = "Persistent"

export type DamageRoll = { category: DamageCategory | null; damageType: string; dice: number; die: Either<Die, number> }

export type Die = "D4" | "D6" | "D8" | "D10" | "D12" | "D20" | "D100"

export type Either<L, R> = 
/**
 * A value of type `L`.
 */
L | 
/**
 * A value of type `R`.
 */
R

export type Feat = { _id: string | null; fvttId: string; name: string; actionType: string; actions: number | null; category: string; description: string; level: number; prerequisites?: string[]; publication: Publication; rules?: Rule[]; rarity: string; tags?: string[]; traits?: string[]; slug: string; type: string }

export type GetFeatsFilterForm = { has_traits?: string[] }

export type Heritage = { _id: string; fvttId: string; name: string; slug: string; description: string; ancestrySlug: string; publication: Publication; rules?: Rule[]; rarity: string; traits?: string[]; type: string }

export type Item = { refSlug: string | null; img: string | null; level: number | null; name: string; uuid: string }

export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }

export type Languages = { count: number | null; value: string[]; custom: string | null }

export type LinkPreview = { slug: string; name: string; description: string; rarity: string | null; traits: string[] }

export type LoginForm = { username: string; password: string }

export type MVecType<T> = T[]

export type NewCharacterForm = { name: string; level: number; attributeScores: { [key in Attribute]: number }; ancestry: string; ancestryDecisions: { [key in string]: Choice[] }; heritageDecisions: Choice[]; ancestryBoosts: Attribute[]; background: string; backgroundDecisions: { [key in string]: Choice[] }; backgroundBoosts: Attribute[]; class: string; classDecisions: { [key in string]: { [key in string]: Choice[] } }; skills: { [key in Skill]: Proficiency }; additionalSkills: { [key in string]: [Attribute, Proficiency] } }

export type Proficiency = "Untrained" | "Trained" | "Expert" | "Master" | "Legendary"

export type Publication = { license: string; remaster: boolean; title: string; source: string | null; page: string | null }

export type Rule = { key: "ActiveEffectLike"; mode: string; path: string; phase: string | null; value: JsonValue; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "Strike"; fist: boolean | null; damage: Damage | null; category: string | null; group: string | null; img: string | null; range: JsonValue | null; slug: string | null; label: string | null; predicate?: MVecType<RulePredicateFilter>; traits?: string[]; baseType: string | null; options?: string[]; priority: number | null } | { key: "RollOption"; count: boolean | null; alwaysActive: boolean | null; mergeable: boolean | null; disabledValue: boolean | null; toggleable: Either<string, boolean> | null; removeUponCreate: boolean | null; label: string | null; option: string; selector: string | null; phase: string | null; domain: string | null; placement: string | null; disabledIf?: MVecType<RulePredicateFilter>; predicate?: MVecType<RulePredicateFilter>; suboptions?: RuleChoice[]; value?: JsonValue | null; priority: number | null } | { key: "BaseSpeed"; type: string | null; selector?: MVecType<string>; value: JsonValue; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "GrantItem"; track: boolean | null; inMemoryOnly: boolean | null; reevaluateOnUpdate: boolean | null; allowDuplicate: boolean | null; nestFeat: boolean | null; preselectCoices: JsonValue | null; flag: string | null; uuid: string; predicate?: MVecType<RulePredicateFilter>; preselectChoices?: { [key in string]: string }; onDeleteActions: JsonValue | null; alterations: JsonValue | null; priority: number | null } | { key: "ItemAlteration"; itemId: string | null; itemType: string | null; phase: string | null; mode: string; label: string | null; selector: string | null; predicate?: MVecType<RulePredicateFilter>; property: string; textRef?: string[]; value?: JsonValue | null; priority: number | null } | { key: "ChoiceSet"; adjustName: Either<boolean, string> | null; slugsAsValues: boolean | null; actorFlag: boolean | null; allowedDrops: ChoiceSetAllowedDrops | null; choices?: MVecType<Either<RuleChoice, string>>; rollOption: string | null; label: string | null; selection: string | null; flag: string | null; slug: string | null; prompt: string | null; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "CreatureSize"; resizeEquipment: boolean | null; value: string; reach: JsonValue | null; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "FlatModifier"; alternate: boolean | null; critical: boolean | null; hideIfDisabled: boolean | null; fromEquipment: boolean | null; force: boolean | null; damageCategory: string | null; damageType: string | null; phase: string | null; ability: string | null; label: string | null; predicate?: MVecType<RulePredicateFilter>; slug: string | null; selector: MVecType<string>; type: string | null; value: JsonValue | null; priority: number | null } | { key: "AdjustDegreeOfSuccess"; adjustment?: { [key in string]: string }; predicate?: MVecType<RulePredicateFilter>; selector: MVecType<string>; type: string | null; outcome?: string[]; priority: number | null } | { key: "Weakness"; predicate?: MVecType<RulePredicateFilter>; type?: MVecType<string>; value: JsonValue; priority: number | null } | { key: "Immunity"; type: MVecType<string>; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "AdjustStrike"; mode: string; property: string; value: Either<string, number>; definition?: MVecType<RulePredicateFilter>; predicate?: MVecType<RulePredicateFilter>; selector: string | null; priority: number | null } | { key: "Sense"; selector: MVecType<string>; range: JsonValue | null; acuity: string | null; value: JsonValue | null; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "Resistance"; value: JsonValue; type?: MVecType<string>; label: string | null; doubleVs?: string[]; exceptions?: JsonValue; definition?: MVecType<RulePredicateFilter>; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "DamageDice"; hideIfDisabled: boolean | null; critical: boolean | null; slug: string | null; label: string | null; category: string | null; damageType: string | null; diceNumber: Either<string, number> | null; dieSize: string | null; override?: { [key in string]: JsonValue }; selector: MVecType<string>; predicate?: MVecType<RulePredicateFilter>; value: JsonValue | null; priority: number | null } | { key: "Note"; predicate?: MVecType<RulePredicateFilter>; selector?: MVecType<string>; text: string; title: string | null; outcome?: string[]; priority: number | null } | { key: "ActorTraits"; predicate?: MVecType<RulePredicateFilter>; add?: string[]; remove?: string[]; priority: number | null } | { key: "AdjustModifier"; suppress: boolean | null; maxApplications: number | null; type: string | null; damageType: string | null; relabel: string | null; mode: string | null; predicate?: MVecType<RulePredicateFilter>; selector?: MVecType<string>; selectors?: string[] | null; slug: string | null; value: JsonValue | null; priority: number | null } | { key: "TokenLight"; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "Aura"; slug: JsonValue | null; level: JsonValue | null; effects: JsonValue | null; radius: JsonValue | null; traits: JsonValue | null; predicate: JsonValue | null; priority: JsonValue | null } | { key: "CraftingEntry"; isDailyPrep: boolean | null; isPrepared: boolean | null; isAlchemical: boolean | null; maxItemLevel: JsonValue | null; label: string | null; maxSlots: number | null; name: string | null; selector: string; craftableItems?: MVecType<RulePredicateFilter>; batchSizes: JsonValue | null; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "EphemeralEffect"; affects: string | null; uuid: string; predicate?: MVecType<RulePredicateFilter>; selectors?: MVecType<string>; priority: number | null } | { key: "DamageAlteration"; mode: string; slug: string | null; predicate?: MVecType<RulePredicateFilter>; property: string; selectors?: string[]; value: JsonValue | null; priority: number | null } | { key: "MartialProficiency"; label: string | null; sameAs: string | null; kind: string | null; slug: string | null; maxRank: string | null; definition?: MVecType<RulePredicateFilter>; value: JsonValue | null; priority: number | null } | { key: "CriticalSpecialization"; alternate: boolean | null; predicate?: MVecType<RulePredicateFilter>; damageDice: DamageRoll | null; priority: number | null } | { key: "SubstituteRoll"; required: boolean | null; selector: string; effectType: string | null; label: string | null; slug: string | null; value: number; predicate?: MVecType<RulePredicateFilter>; priority: number | null } | { key: "MultipleAttackPenalty"; predicate?: MVecType<RulePredicateFilter>; selector?: string; value: number; priority: number | null } | { key: "RollTwice"; removeAfterRoll: boolean | null; keep: string; predicate?: MVecType<RulePredicateFilter>; selector: string; priority: number | null } | { key: "FastHealing"; type: string | null; predicate?: MVecType<RulePredicateFilter>; value: number; priority: number | null } | { key: "DexterityModifierCap"; predicate?: MVecType<RulePredicateFilter>; value: number; priority: number | null } | { key: "TempHP"; predicate?: MVecType<RulePredicateFilter>; value: number; priority: number | null } | { key: "SpecialStatistic"; extends: string; itemCasting: SpecialStatisticItemCasting | null; priority: number | null; slug: string; label: string | null; type: string | null } | { key: "TokenEffectIcon"; predicate?: MVecType<RulePredicateFilter>; value: string; priority: number | null }

export type RuleChoice = { label: string | null; item_type: string | null; value: JsonValue | null; filter?: MVecType<RulePredicateFilter> }

export type RulePredicateFilter = string | number | { not?: MVecType<RulePredicateFilter> } | { and?: MVecType<RulePredicateFilter> } | { or?: MVecType<RulePredicateFilter> } | { nand?: MVecType<RulePredicateFilter> } | { nor?: MVecType<RulePredicateFilter> } | { lt?: MVecType<RulePredicateFilter> } | { lte?: MVecType<RulePredicateFilter> } | { gt?: MVecType<RulePredicateFilter> } | { gte?: MVecType<RulePredicateFilter> }

export type SignupForm = { username: string; password: string; email: string }

export type Size = "Tiny" | "Small" | "Medium" | "Large"

export type Skill = "Acrobatics" | "Arcana" | "Athletics" | "Crafting" | "Deception" | "Diplomacy" | "Intimidation" | "Medicine" | "Nature" | "Occultism" | "Performance" | "Religion" | "Society" | "Stealth" | "Survival" | "Thievery"

export type SpecialStatisticItemCasting = { predicate?: MVecType<RulePredicateFilter> }

export type Speed = { walk: number; swim: number | null }

export type Summary = { id: string; slug: string; name: string; data: SummaryData[] }

export type SummaryData = { type: "String"; value: string; tooltip: string | null; link: string | null; abbreviation: SummaryDataAbbreviateType | null } | { type: "Number"; value: number; unit: SummaryDataNumberUnit | null } | { type: "Tag"; value: string; tooltip: string | null; link: string | null; category: SummaryDataTagCategory; abbreviation: SummaryDataAbbreviateType | null }

export type SummaryDataAbbreviateType = "source"

export type SummaryDataNumberUnit = "feet"

export type SummaryDataTagCategory = "rarity"

export type UserClaims = { sub: string; iat: string; exp: string }

